# Generated by Django 5.1.7 on 2025-04-24 17:56

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("reecon", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="IgnoredRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("reason", models.TextField(help_text="The reason the entity is ignored.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LlmProvider",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                ("display_name", models.CharField(unique=True)),
                ("name", models.CharField(unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Redditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("last_processed", models.DateTimeField(default=django.utils.timezone.now, help_text="Date and time when the entity was last processed.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StatusMessage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "active",
                    models.BooleanField(
                        default=False,
                        help_text="If `True`, the `StatusMessage` will be included in the /api/v1/messages/ response. Set `active_is_computed` to `True` if this field is dynamically set in signals.py.",
                    ),
                ),
                ("active_is_computed", models.BooleanField(default=False, help_text="Set this to `True` if `StatusMessage.active` is dynamically set in signals.py.")),
                (
                    "category",
                    models.CharField(
                        choices=[("success", "success"), ("info", "info"), ("warning", "warning"), ("error", "error")],
                        help_text="Corresponds to how the message is rendered in the extension Status tab.",
                    ),
                ),
                ("message", models.TextField(help_text="Information that should be conveyed to users in the extension Status tab.")),
                ("name", models.CharField(help_text="Descriptive name for the `StatusMessage`.", unique=True)),
                ("source", models.CharField(default="api", help_text="Describes where the `StatusMessage` originated from ('api' / 'extension').")),
            ],
        ),
        migrations.CreateModel(
            name="Thread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("last_processed", models.DateTimeField(default=django.utils.timezone.now, help_text="Date and time when the entity was last processed.")),
                ("path", models.CharField(help_text="Thread URL path", unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableRedditorContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableThread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("path", models.CharField(help_text="Thread URL path", unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableThreadContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("path", models.CharField(help_text="Thread URL path", unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LLM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                ("name", models.CharField(unique=True)),
                ("context_window", models.IntegerField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="llms", to="reecon.llmprovider")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("reddit_username", models.CharField(blank=True, null=True, unique=True)),
                ("user", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="RequestMetadata",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("input_tokens", models.IntegerField(help_text="Number of input tokens.")),
                ("output_tokens", models.IntegerField(help_text="Number of output tokens.")),
                ("total_inputs", models.IntegerField(default=0, help_text="The total number of unique submissions used as inputs when processing the LLM query.")),
                ("total_tokens", models.IntegerField(help_text="Total number of tokens.")),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed resources to pay for LLM processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(
                        help_text="The LLM used to process the query.", on_delete=django.db.models.deletion.CASCADE, related_name="requests_metadata", to="reecon.llm"
                    ),
                ),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit request to initiate the LLM query.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RedditorData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                (
                    "sentiment_polarity",
                    models.FloatField(
                        default=0.0,
                        help_text="The inferred sentiment polarity based on the submissions.",
                        validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)],
                    ),
                ),
                (
                    "sentiment_subjectivity",
                    models.FloatField(
                        default=0.5,
                        help_text="The inferred sentiment subjectivity based on the submissions.",
                        validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)],
                    ),
                ),
                ("summary", models.TextField(help_text="The inferred summary of the entity based on the submissions.")),
                ("age", models.IntegerField(help_text="The inferred age of the redditor based on their submissions.")),
                (
                    "interests",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), default=list, help_text="The inferred interests of the redditor based on their submissions.", size=None
                    ),
                ),
                ("iq", models.IntegerField(help_text="The inferred IQ of the redditor based on their submissions.")),
                (
                    "redditor",
                    models.ForeignKey(
                        help_text="The redditor whose submissions were used to produce the properties of this object.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="reecon.redditor",
                    ),
                ),
                (
                    "request_meta",
                    models.OneToOneField(
                        help_text="The metadata associated with the request that initiated processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="reecon.requestmetadata",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RedditorContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("prompt", models.TextField(help_text="The prompt used to generate the response.")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("response", models.TextField(help_text="The response generated by the LLM based on the context query.")),
                (
                    "context",
                    models.ForeignKey(
                        help_text="The reddit redditor whose submissions were used to generate the query response.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="context_queries",
                        to="reecon.redditor",
                    ),
                ),
                (
                    "request_meta",
                    models.OneToOneField(
                        help_text="The metadata associated with the request that initiated processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="reecon.requestmetadata",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ThreadContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("prompt", models.TextField(help_text="The prompt used to generate the response.")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                ("response", models.TextField(help_text="The response generated by the LLM based on the context query.")),
                (
                    "context",
                    models.ForeignKey(
                        help_text="The reddit thread whose submissions were used to generate the query response.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="context_queries",
                        to="reecon.thread",
                    ),
                ),
                (
                    "request_meta",
                    models.OneToOneField(
                        help_text="The metadata associated with the request that initiated processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="reecon.requestmetadata",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ThreadData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, help_text="Date and time of creation.")),
                (
                    "sentiment_polarity",
                    models.FloatField(
                        default=0.0,
                        help_text="The inferred sentiment polarity based on the submissions.",
                        validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)],
                    ),
                ),
                (
                    "sentiment_subjectivity",
                    models.FloatField(
                        default=0.5,
                        help_text="The inferred sentiment subjectivity based on the submissions.",
                        validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)],
                    ),
                ),
                ("summary", models.TextField(help_text="The inferred summary of the entity based on the submissions.")),
                (
                    "keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), default=list, help_text="The inferred keywords of the thread based on the submissions.", size=None
                    ),
                ),
                (
                    "request_meta",
                    models.OneToOneField(
                        help_text="The metadata associated with the request that initiated processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="reecon.requestmetadata",
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        help_text="The reddit thread whose submissions were used to generate the properties of this object.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="reecon.thread",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
