# Generated by Django 5.1.7 on 2025-03-23 22:19

import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("reecon", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="IgnoredRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("reason", models.TextField(help_text="The reason the entity is ignored.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LlmProvider",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                ("display_name", models.CharField(unique=True)),
                ("name", models.CharField(unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StatusMessage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "active",
                    models.BooleanField(
                        default=False,
                        help_text="If `True`, the `StatusMessage` will be included in the /api/v1/messages/ response. Set `active_is_computed` to `True` if this field is dynamically set in signals.py.",
                    ),
                ),
                (
                    "active_is_computed",
                    models.BooleanField(
                        default=False,
                        help_text="Set this to `True` if `StatusMessage.active` is dynamically set in signals.py.",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("success", "success"), ("info", "info"), ("warning", "warning"), ("error", "error")],
                        help_text="Corresponds to how the message is rendered in the extension Status tab.",
                    ),
                ),
                (
                    "message",
                    models.TextField(help_text="Information that should be conveyed to users in the extension Status tab."),
                ),
                ("name", models.CharField(help_text="Descriptive name for the `StatusMessage`.", unique=True)),
                (
                    "source",
                    models.CharField(
                        default="api",
                        help_text="Describes where the `StatusMessage` originated from ('api' / 'extension').",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LLM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                ("name", models.CharField(unique=True)),
                ("context_window", models.IntegerField()),
                (
                    "provider",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="llms", to="reecon.llmprovider"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedBinary",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.BinaryField()),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributed_binary",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="produced_binary", to="reecon.llm"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedFloat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.FloatField()),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributed_floats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="produced_floats", to="reecon.llm"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedInteger",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.IntegerField()),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributed_integers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="produced_integers", to="reecon.llm"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedText",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.TextField()),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributed_text",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="produced_text", to="reecon.llm"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedTextList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "value",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(),
                        default=list,
                        help_text="The value of the produced list of text.",
                        size=None,
                    ),
                ),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributed_text_lists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "llm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="produced_text_lists", to="reecon.llm"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("reddit_username", models.CharField(blank=True, null=True, unique=True)),
                (
                    "user",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Redditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "last_processed",
                    models.DateTimeField(auto_now=True, help_text="Date and time when the entity was last processed."),
                ),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the redditor for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_redditors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RedditorContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("prompt", models.TextField()),
                (
                    "total_inputs",
                    models.IntegerField(default=0, help_text="The total number of inputs used when processing the context query."),
                ),
                (
                    "context",
                    models.ForeignKey(
                        help_text="The reddit redditor whose submissions were used to generate the query response.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="context_queries",
                        to="reecon.redditor",
                    ),
                ),
                (
                    "response",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="response_redditor_context_query",
                        to="reecon.producedtext",
                    ),
                ),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the context query for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_redditor_context_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RedditorData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "total_inputs",
                    models.IntegerField(default=0, help_text="The total number of inputs used when processing the data."),
                ),
                (
                    "age",
                    models.OneToOneField(
                        help_text="The inferred age of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="age_redditor_data",
                        to="reecon.producedinteger",
                    ),
                ),
                (
                    "interests",
                    models.OneToOneField(
                        help_text="The inferred interests of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interests_redditor_data",
                        to="reecon.producedtextlist",
                    ),
                ),
                (
                    "iq",
                    models.OneToOneField(
                        help_text="The inferred IQ of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="iq_redditor_data",
                        to="reecon.producedinteger",
                    ),
                ),
                (
                    "redditor",
                    models.ForeignKey(
                        help_text="The redditor whose submissions were used to produce the data associated with this entry.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="reecon.redditor",
                    ),
                ),
                (
                    "sentiment_polarity",
                    models.OneToOneField(
                        default=0.0,
                        help_text="The inferred sentiment polarity of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentiment_polarity_redditor_data",
                        to="reecon.producedfloat",
                    ),
                ),
                (
                    "sentiment_subjectivity",
                    models.OneToOneField(
                        default=0.5,
                        help_text="The inferred sentiment subjectivity of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentiment_subjectivity_redditor_data",
                        to="reecon.producedfloat",
                    ),
                ),
                (
                    "summary",
                    models.OneToOneField(
                        help_text="An inferred summary of the redditor based on their submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="summary_redditor_data",
                        to="reecon.producedtext",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Thread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "last_processed",
                    models.DateTimeField(auto_now=True, help_text="Date and time when the entity was last processed."),
                ),
                ("url", models.URLField(help_text="URL.", unique=True)),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the thread for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ThreadContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("prompt", models.TextField()),
                (
                    "total_inputs",
                    models.IntegerField(default=0, help_text="The total number of inputs used when processing the context query."),
                ),
                (
                    "context",
                    models.ForeignKey(
                        help_text="The reddit thread whose submissions were used to generate the query response.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="context_queries",
                        to="reecon.thread",
                    ),
                ),
                (
                    "response",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="response_thread_context_query",
                        to="reecon.producedtext",
                    ),
                ),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the context query for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_thread_context_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ThreadData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "total_inputs",
                    models.IntegerField(default=0, help_text="The total number of inputs used when processing the data."),
                ),
                (
                    "keywords",
                    models.OneToOneField(
                        help_text="The inferred keywords of the thread based on the submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="keywords_thread_data",
                        to="reecon.producedtextlist",
                    ),
                ),
                (
                    "sentiment_polarity",
                    models.OneToOneField(
                        default=0.0,
                        help_text="The inferred sentiment polarity of the thread based on the submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentiment_polarity_thread_data",
                        to="reecon.producedfloat",
                    ),
                ),
                (
                    "sentiment_subjectivity",
                    models.OneToOneField(
                        default=0.5,
                        help_text="The inferred sentiment subjectivity of the thread based on the submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentiment_subjectivity_thread_data",
                        to="reecon.producedfloat",
                    ),
                ),
                (
                    "summary",
                    models.OneToOneField(
                        help_text="The inferred summary of what is being discussed in the thread based on the submissions.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="summary_thread_data",
                        to="reecon.producedtext",
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        help_text="The reddit thread whose submissions were used to generate the stats in this entry.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="reecon.thread",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the unprocessable redditor for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_unprocessable_redditors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableRedditorContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the unprocessable redditor context query for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_unprocessable_redditor_context_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableThread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("url", models.URLField(help_text="URL.", unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the unprocessable thread for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_unprocessable_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableThreadContextQuery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("url", models.URLField(help_text="URL.", unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
                (
                    "submitter",
                    models.ForeignKey(
                        help_text="The user who submit the unprocessable thread context query for processing.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_unprocessable_thread_context_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
