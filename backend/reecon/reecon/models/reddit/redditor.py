from django.contrib.auth.models import User
from django.db import models
from django.utils.text import Truncator

from ..abstracts import (
    Created,
    IgnoredReason,
    LastProcessed,
    RedditorUsername,
    UnprocessableReason,
)
from ..producer import (
    ProducedInteger,
    ProducedFloat,
    ProducedText,
    ProducedTextList,
)


__all__ = (
    "IgnoredRedditor",
    "Redditor",
    "RedditorContextQuery",
    "RedditorData",
    "UnprocessableRedditor",
)


class IgnoredRedditor(Created, IgnoredReason, RedditorUsername):
    """
    Stores a single ignored redditor entry. These entries are for usernames that should not be processed.
    """

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username})"


class Redditor(Created, LastProcessed, RedditorUsername):
    """
    Stores a single redditor entry.
    """

    submitter = models.ForeignKey(
        User,
        null=False,
        on_delete=models.CASCADE,
        related_name="submitted_redditors",
        help_text="The user who submit the redditor for processing.",
    )

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username}, submitter={self.submitter.username})"


class RedditorContextQuery(Created):
    context = models.ForeignKey(
        Redditor,
        null=False,
        on_delete=models.CASCADE,
        related_name="context_queries",
        help_text="The reddit redditor whose submissions were used to generate the query response.",
    )
    prompt = models.TextField(
        null=False,
    )
    response = models.OneToOneField(
        ProducedText,
        null=False,
        on_delete=models.CASCADE,
        related_name="response_redditor_context_query",
    )
    submitter = models.ForeignKey(
        User,
        null=False,
        on_delete=models.CASCADE,
        related_name="submitted_redditor_context_queries",
        help_text="The user who submit the context query for processing.",
    )
    total_inputs = models.IntegerField(
        default=0, null=False, help_text="The total number of inputs used when processing the context query."
    )

    def __str__(self):
        return (
            f"{self.__class__.__name__}(context={self.context.username}, submitter={self.submitter.username}, "
            f"prompt={Truncator(self.prompt).chars(100)}, response={Truncator(self.response.value).chars(100)}), "
            f"total_inputs={self.total_inputs}"
        )


class RedditorData(Created):
    """
    Stores a single redditor data entry. These values are generated by a producer.
    """

    age = models.OneToOneField(
        ProducedInteger,
        null=False,
        on_delete=models.CASCADE,
        related_name="age_redditor_data",
        help_text="The inferred age of the redditor based on their submissions.",
    )
    interests = models.OneToOneField(
        ProducedTextList,
        null=False,
        on_delete=models.CASCADE,
        related_name="interests_redditor_data",
        help_text="The inferred interests of the redditor based on their submissions.",
    )
    iq = models.OneToOneField(
        ProducedInteger,
        null=False,
        on_delete=models.CASCADE,
        related_name="iq_redditor_data",
        help_text="The inferred IQ of the redditor based on their submissions.",
    )
    redditor = models.ForeignKey(
        Redditor,
        null=False,
        on_delete=models.CASCADE,
        related_name="data",
        help_text="The redditor whose submissions were used to produce the data associated with this entry.",
    )
    sentiment_polarity = models.OneToOneField(
        ProducedFloat,
        default=0.0,  # Possible range is [-1.0, 1.0]
        null=False,
        on_delete=models.CASCADE,
        related_name="sentiment_polarity_redditor_data",
        help_text="The inferred sentiment polarity of the redditor based on their submissions.",
    )
    sentiment_subjectivity = models.OneToOneField(
        ProducedFloat,
        default=0.5,  # Possible range is [0.0, 1.0]
        null=False,
        on_delete=models.CASCADE,
        related_name="sentiment_subjectivity_redditor_data",
        help_text="The inferred sentiment subjectivity of the redditor based on their submissions.",
    )
    summary = models.OneToOneField(
        ProducedText,
        null=False,
        on_delete=models.CASCADE,
        related_name="summary_redditor_data",
        help_text="An inferred summary of the redditor based on their submissions.",
    )
    total_inputs = models.IntegerField(
        default=0, null=False, help_text="The total number of inputs used when processing the data."
    )

    def __str__(self):
        return (
            f"{self.__class__.__name__}(age={self.age.value}, iq={self.iq.value}, interests={self.interests.value}, "
            f"redditor={self.redditor.username}, sentiment_polarity={self.sentiment_polarity.value}, "
            f"sentiment_subjectivity={self.sentiment_subjectivity.value}, summary={Truncator(self.summary.value).chars(100)}), "
            f"total_inputs={self.total_inputs}"
        )


class UnprocessableRedditor(Created, RedditorUsername, UnprocessableReason):
    """
    Stores a single unprocessable redditor entry. A redditor is unprocessable if there are not enough
    comment / thread submissions available for processing.
    """

    submitter = models.ForeignKey(
        User,
        null=False,
        on_delete=models.CASCADE,
        related_name="submitted_unprocessable_redditors",
        help_text="The user who submit the unprocessable redditor for processing.",
    )

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username}, submitter={self.submitter.username})"
