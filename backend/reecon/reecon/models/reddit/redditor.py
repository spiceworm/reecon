from django.contrib.postgres.fields import ArrayField
from django.db import models
from django.utils.text import Truncator

from ..abstracts import (
    ContextQueryPrompt,
    Created,
    IgnoredReason,
    LastProcessed,
    RedditorUsername,
    RequestMeta,
    SentimentPolarity,
    SentimentSubjectivity,
    Summary,
    UnprocessableReason,
)
from ... import util


__all__ = (
    "IgnoredRedditor",
    "Redditor",
    "RedditorContextQuery",
    "RedditorData",
    "UnprocessableRedditor",
    "UnprocessableRedditorContextQuery",
)


class IgnoredRedditor(Created, IgnoredReason, RedditorUsername):
    """
    Stores a single ignored redditor entry. These entries are for usernames that should not be processed.
    """

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            reason=self.reason,
            username=self.username,
        )


class Redditor(Created, LastProcessed, RedditorUsername):
    """
    Stores a single redditor entry.
    """

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            last_processed=self.last_processed,
            username=self.username,
        )


class RedditorContextQuery(Created, ContextQueryPrompt, RequestMeta):
    context = models.ForeignKey(
        Redditor,
        null=False,
        on_delete=models.CASCADE,
        related_name="context_queries",
        help_text="The reddit redditor whose submissions were used to generate the query response.",
    )
    response = models.TextField(
        null=False,
        help_text="The response generated by the LLM based on the context query.",
    )

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            context=self.context,
            prompt=Truncator(self.prompt).chars(100),
            response=Truncator(self.response).chars(100),
        )


class RedditorData(Created, RequestMeta, SentimentPolarity, SentimentSubjectivity, Summary):
    """
    Stores a single redditor data entry. These values are generated by an LLM.
    """

    age = models.IntegerField(
        null=False,
        help_text="The inferred age of the redditor based on their submissions.",
    )
    interests = ArrayField(
        models.CharField(
            null=False,
        ),
        default=list,
        null=False,
        help_text="The inferred interests of the redditor based on their submissions.",
    )
    iq = models.IntegerField(
        null=False,
        help_text="The inferred IQ of the redditor based on their submissions.",
    )
    redditor = models.ForeignKey(
        Redditor,
        null=False,
        on_delete=models.CASCADE,
        related_name="data",
        help_text="The redditor whose submissions were used to produce the properties of this object.",
    )

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            age=self.age,
            iq=self.iq,
            interests=self.interests,
            redditor=self.redditor.username,
            sentiment_polarity=self.sentiment_polarity,
            sentiment_subjectivity=self.sentiment_subjectivity,
            summary=Truncator(self.summary).chars(100),
        )


class UnprocessableRedditor(Created, RedditorUsername, UnprocessableReason):
    """
    Stores a single unprocessable redditor entry. A redditor is unprocessable if there are not enough
    comment / thread submissions available for processing.
    """

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            username=self.username,
            reason=self.reason,
        )


class UnprocessableRedditorContextQuery(Created, RedditorUsername, UnprocessableReason):
    """
    Stores a single unprocessable redditor context query entry. A redditor context query is unprocessable if
    there are not enough comment / thread submissions available for processing.
    """

    def __str__(self):
        return util.format.class__str__(
            self.__class__.__name__,
            username=self.username,
            reason=self.reason,
        )
