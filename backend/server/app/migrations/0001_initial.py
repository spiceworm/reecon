# Generated by Django 5.1.1 on 2024-09-20 00:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IgnoredRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("reason", models.TextField(help_text="The reason the entity is ignored.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Producer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                (
                    "context_window",
                    models.IntegerField(
                        help_text="The maximum number of tokens that can be used in a single request to the pruducers API, inclusive of both input and output tokens. For OpenAI models, this number is specified on a per model basis (https://platform.openai.com/docs/models).",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the entity used to produce data.", max_length=255, unique=True
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducerCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("description", models.TextField(help_text="Additional description.")),
                ("name", models.CharField(help_text="The name of the producer category.", max_length=255, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Redditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "last_processed",
                    models.DateTimeField(auto_now=True, help_text="Date and time when the entity was last processed."),
                ),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Thread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "last_processed",
                    models.DateTimeField(auto_now=True, help_text="Date and time when the entity was last processed."),
                ),
                ("url", models.URLField(help_text="URL.", unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableRedditor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("username", models.CharField(help_text="The username of the redditor.", max_length=32, unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnprocessableThread",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("url", models.URLField(help_text="URL.", unique=True)),
                ("reason", models.TextField(help_text="The reason the entity cannot be processed.")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedText",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.TextField(help_text="The value of the produced text.")),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contributed_text",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "producer",
                    models.ForeignKey(
                        help_text="The producer of the value attribute.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="produced_text",
                        to="app.producer",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedInteger",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.IntegerField(help_text="The value of the produced integer.")),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contributed_integers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "producer",
                    models.ForeignKey(
                        help_text="The producer of the value attribute.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="produced_integers",
                        to="app.producer",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedFloat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.FloatField(help_text="The value of the produced float.")),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contributed_floats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "producer",
                    models.ForeignKey(
                        help_text="The producer of the value attribute.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="produced_floats",
                        to="app.producer",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProducedBinary",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                ("value", models.BinaryField(help_text="The value of the produced binary.")),
                (
                    "contributor",
                    models.ForeignKey(
                        help_text="The user who contributed the resources that produced the data value.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contributed_binary",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "producer",
                    models.ForeignKey(
                        help_text="The producer of value attribute.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="produced_binary",
                        to="app.producer",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="producer",
            name="category",
            field=models.ForeignKey(
                help_text="The category of the producer.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="producers",
                to="app.producercategory",
            ),
        ),
        migrations.CreateModel(
            name="RedditorData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "age",
                    models.OneToOneField(
                        help_text="The inferred age of the redditor based on their submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="redditor_age_data",
                        to="app.producedinteger",
                    ),
                ),
                (
                    "iq",
                    models.OneToOneField(
                        help_text="The inferred IQ of the redditor based on their submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="redditor_iq_data",
                        to="app.producedinteger",
                    ),
                ),
                (
                    "redditor",
                    models.ForeignKey(
                        help_text="The redditor whose submissions were used to produce the data associated with this entry.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="data",
                        to="app.redditor",
                    ),
                ),
                (
                    "sentiment_polarity",
                    models.OneToOneField(
                        help_text="The inferred sentiment polarity of the redditor based on their submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="redditor_sentiment_polarity_data",
                        to="app.producedfloat",
                    ),
                ),
                (
                    "summary",
                    models.OneToOneField(
                        help_text="An inferred summary of the redditor based on their submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="redditor_summary_data",
                        to="app.producedtext",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ThreadData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now=True, help_text="Date and time of creation.")),
                (
                    "sentiment_polarity",
                    models.OneToOneField(
                        help_text="The inferred sentiment polarity of the thread based on the submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="thread_sentiment_polarity_data",
                        to="app.producedfloat",
                    ),
                ),
                (
                    "summary",
                    models.OneToOneField(
                        help_text="The inferred summary of what is being discussed in the thread based on the submissions.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="thread_summary_data",
                        to="app.producedtext",
                    ),
                ),
                (
                    "thread",
                    models.ForeignKey(
                        help_text="The reddit thread whose submissions were used to generate the stats in this entry.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="data",
                        to="app.thread",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
