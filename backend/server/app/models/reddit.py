import logging
from urllib.parse import urlparse

from django.contrib.auth.models import User
from django.db import models

from . import LLM


__all__ = (
    "IgnoredRedditor",
    "Redditor",
    "RedditorStats",
    "Thread",
    "ThreadStats",
    "UnprocessableThread",
    "UnprocessableRedditor",
)


log = logging.getLogger("app")


class IgnoredRedditor(models.Model):
    """
    Stores a single ignored redditor entry. These entries are for usernames that should not be processed.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of creation of the ignored redditor",
    )
    reason = models.TextField(
        help_text="The reason the redditor is being ignored from processing.",
    )
    username = models.CharField(
        max_length=32,
        null=False,
        unique=True,
        help_text="The username of the redditor.",
    )


class Redditor(models.Model):
    """
    Stores a single redditor entry.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the redditor.",
    )
    last_processed = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the last processing of the redditor's submissions.",
    )
    username = models.CharField(
        max_length=32,
        null=False,
        unique=True,
        help_text="The username of the redditor.",
    )


class RedditorStats(models.Model):
    """
    Stores a single redditor stats entry. These stats are generated by an LLM based on a prompt.
    """

    age = models.IntegerField(
        null=False,
        help_text="The predicted age of the redditor based on their submissions.",
    )
    confidence = models.IntegerField(
        null=False,
        help_text="The confidence LLM has in the quality of the predicted values.",
    )
    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the redditor stats.",
    )
    iq = models.IntegerField(
        null=False,
        help_text="The predicted IQ of the redditor based on their submissions.",
    )
    llm = models.ForeignKey(
        LLM,
        on_delete=models.PROTECT,
        related_name="redditor_stats",
        help_text="The LLM used to generate the stats in this entry.",
    )
    purchaser = models.ForeignKey(
        User,
        on_delete=models.PROTECT,
        related_name="redditor_stats_purchases",
        help_text="The user whose API credits were used for processing.",
    )
    redditor = models.ForeignKey(
        Redditor,
        on_delete=models.PROTECT,
        related_name="stats",
        help_text="The redditor whose submissions were used to generate the stats in this entry.",
    )


class Thread(models.Model):
    """
    Stores a single reddit thread entry. These stats are generated by an LLM based on a prompt.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the thread.",
    )
    last_processed = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the last processing of the submissions in this redditor thread.",
    )
    url = models.URLField(
        null=False,
        unique=True,
        help_text="The URL of the reddit thread.",
    )

    @property
    def path(self):
        """
        The path portion of the reddit thread's URL. The browser extension POSTs thread URL paths and we
        return URL paths in responses.
        """
        return urlparse(self.url).path


class ThreadStats(models.Model):
    """
    Stores a single reddit thread stats entry. These stats are generated using natural language processing and
    by an LLM based on a prompt.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the thread stats.",
    )
    sentiment_polarity = models.FloatField(
        null=False,
        help_text=(
            "The sentiment polarity value produced after processing the submissions in this thread using "
            "natural language processing."
        ),
    )
    thread = models.ForeignKey(
        Thread,
        on_delete=models.PROTECT,
        related_name="stats",
        help_text="The reddit thread whose submissions were used to generate the stats in this entry.",
    )


class UnprocessableThread(models.Model):
    """
    Stores a single unprocessable thread entry. A thread is unprocessable if there are not enough
    comments available for processing.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the unprocessable thread.",
    )
    reason = models.TextField(
        help_text="The reason the reddit thread cannot be processed.",
    )
    url = models.URLField(
        null=False,
        unique=True,
        help_text="The URL of the reddit thread.",
    )

    @property
    def path(self):
        """
        The path portion of the reddit thread's URL. The browser extension POSTs thread URL paths and we
        return URL paths in responses.
        """
        return urlparse(self.url).path


class UnprocessableRedditor(models.Model):
    """
    Stores a single unprocessable redditor entry. A redditor is unprocessable if there are not enough
    comment / thread submissions available for processing.
    """

    created = models.DateTimeField(
        auto_now=True,
        null=False,
        help_text="Date and time of the creation of the unprocessable redditor.",
    )
    reason = models.TextField(
        help_text="The reason the redditor cannot be processed.",
    )
    username = models.CharField(
        max_length=32,
        null=False,
        unique=True,
        help_text="The username of the redditor who cannot be processed.",
    )
