from django.db import models

from ..abstracts import (
    Created,
    IgnoredReason,
    LastProcessed,
    RedditorUsername,
    UnprocessableReason,
)
from ..producer import (
    ProducedInteger,
    ProducedFloat,
    ProducedText,
)


__all__ = (
    "IgnoredRedditor",
    "Redditor",
    "RedditorData",
    "UnprocessableRedditor",
)


class IgnoredRedditor(Created, IgnoredReason, RedditorUsername):
    """
    Stores a single ignored redditor entry. These entries are for usernames that should not be processed.
    """

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username})"


class Redditor(Created, LastProcessed, RedditorUsername):
    """
    Stores a single redditor entry.
    """

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username})"


class RedditorData(Created):
    """
    Stores a single redditor data entry. These values are generated by a producer.
    """

    age = models.OneToOneField(
        ProducedInteger,
        null=True,
        on_delete=models.PROTECT,
        related_name="redditor_age_data",
        help_text="The inferred age of the redditor based on their submissions.",
    )
    iq = models.OneToOneField(
        ProducedInteger,
        null=True,
        on_delete=models.PROTECT,
        related_name="redditor_iq_data",
        help_text="The inferred IQ of the redditor based on their submissions.",
    )
    redditor = models.ForeignKey(
        Redditor,
        null=False,
        on_delete=models.PROTECT,
        related_name="data",
        help_text="The redditor whose submissions were used to produce the data associated with this entry.",
    )
    sentiment_polarity = models.OneToOneField(
        ProducedFloat,
        null=True,
        on_delete=models.PROTECT,
        related_name="redditor_sentiment_polarity_data",
        help_text="The inferred sentiment polarity of the redditor based on their submissions.",
    )
    summary = models.OneToOneField(
        ProducedText,
        null=True,
        on_delete=models.PROTECT,
        related_name="redditor_summary_data",
        help_text="An inferred summary of the redditor based on their submissions.",
    )

    def __str__(self):
        return (
            f"{self.__class__.__name__}(age={self.age.value}, iq={self.iq.value}, redditor={self.redditor.username}, "
            f"sentiment_polarity={self.sentiment_polarity.value}, summary=...)"
        )


class UnprocessableRedditor(Created, RedditorUsername, UnprocessableReason):
    """
    Stores a single unprocessable redditor entry. A redditor is unprocessable if there are not enough
    comment / thread submissions available for processing.
    """

    def __str__(self):
        return f"{self.__class__.__name__}(username={self.username})"
